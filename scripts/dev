#!/usr/bin/env bash

set -eEuo pipefail

PROGNAME="$(basename $0)"
ROOT="$(cd "$(dirname "$0")/.." &>/dev/null; pwd -P)"

DOCKER_CMD="$(command -v docker || true)"
DB_CONTAINER_IMAGE="registry.hub.docker.com/library/postgres:12-alpine"

# Database parameters
DB_HOST="${DB_HOST:-127.0.0.1}"
DB_PORT="${DB_PORT:-5432}"
DB_USER="${DB_USER:-postgres}"
DB_PASSWORD="${DB_PASSWORD:-postgres}"
DB_SSLMODE="${DB_SSLMODE:-disable}"
DB_NAME="${DB_NAME:-postgres}"
DB_URL="postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=${DB_SSLMODE}"

# error prints a message on stderr and exits immediately.
function error() {
  echo "âœ‹ ERROR: $1" >&2
  exit 1
}

function init() {
  echo "export DB_HOST=\"${DB_HOST}\""
  echo "export DB_PORT=\"${DB_PORT}\""
  echo "export DB_USER=\"${DB_USER}\""
  echo "export DB_SSLMODE=\"${DB_SSLMODE}\""
  echo "export DB_PASSWORD=\"${DB_PASSWORD}\""
  echo "export DB_NAME=\"${DB_NAME}\""
  echo "export DB_URL=\"${DB_URL}\""
}

# docker executes the given command using the docker executable. If "docker" is
# not installed and in $PATH, it prints an error and exits.
function docker() {
  if [ -z "${DOCKER_CMD:-}" ]; then
    error "docker is not installed or is not in \$PATH"
  fi

  ${DOCKER_CMD} "$@"
}

# running determines if the database is running.
function running() {
  local out="$(docker inspect -f "{{.State.Running}}" "${DB_NAME}" 2>&1)"
  if [[ "${out}" == "true" ]]; then
    return 0
  else
    return 1
  fi
}

# stop terminates the database.
function stop() {
  docker rm --force "${DB_NAME}" > /dev/null
  echo "Database stopped (OK)"
}

# start creates and provisions a new database.
function start() {
  if running; then
    error "database is already running!"
  fi

  docker pull --quiet "${DB_CONTAINER_IMAGE}" > /dev/null
  docker run \
    --name "${DB_NAME}" \
    --env "LANG=C" \
    --env "POSTGRES_DB=${DB_NAME}" \
    --env "POSTGRES_USER=${DB_USER}" \
    --env "POSTGRES_PASSWORD=${DB_PASSWORD}" \
    --detach \
    --publish "${DB_PORT}:5432" \
    "${DB_CONTAINER_IMAGE}" \
      -c "shared_buffers=256MB" \
      -c "max_connections=200" \
      > /dev/null

  echo "Database started (OK)"
}


# help prints help.
function help() {
  echo 1>&2 "Usage: ${PROGNAME} <command>"
  echo 1>&2 ""
  echo 1>&2 "Commands:"
  echo 1>&2 "  init         initialization for sourcing"
  echo 1>&2 "  dbstart      start a dev server"
  echo 1>&2 "  dbstop       stop the dev server"
  echo 1>&2 "  dburl        print url"
}

SUBCOMMAND="${1:-}"
case "${SUBCOMMAND}" in
  "" | "help" | "-h" | "--help" )
    help
    ;;

  "dbstart" )
    shift
    start "$@"
    ;;

  "dbstop" )
    shift
    stop "$@"
    ;;

  "init" )
    shift
    init "$@"
    ;;

  "dburl" )
    shift
    dburl "$@"
    ;;

  *)
    help
    exit 1
    ;;
esac